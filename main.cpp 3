/**
    Estrutura inicial para um jogo
    versão: 0.1 (Prof. Alex,  Adaptado Prof. Felski)
*/
#include <iostream>
#include <windows.h>
#include <conio.h>
#include <vector>
#include <chrono>
#include <thread>

using namespace std;


struct player
{
    int x,y;
};

struct inimigo
{
    int xi,yi;
};

bool colisao(int p)  /// colisão
{
    if (p!=0)
    {
        return false;
    }
    else
        return true;
}

struct ExplosaoBomba{
        int xboom, yboom;
};

int main()
{
    using namespace chrono;
    milliseconds TempoInimigo (500);
    milliseconds BombaTimer   (2000);
    auto InicioBomba = chrono::high_resolution_clock::now();
    auto Inicio = chrono::high_resolution_clock::now();
    ///ALERTA: NAO MODIFICAR O TRECHO DE CODIGO, A SEGUIR.
    //INICIO: COMANDOS PARA QUE O CURSOR NAO FIQUE PISCANDO NA TELA
    HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO     cursorInfo;
    GetConsoleCursorInfo(out, &cursorInfo);
    cursorInfo.bVisible = false; // set the cursor visibility
    SetConsoleCursorInfo(out, &cursorInfo);
    //FIM: COMANDOS PARA QUE O CURSOR NAO FIQUE PISCANDO NA TELA
    //INICIO: COMANDOS PARA REPOSICIONAR O CURSOR NO INICIO DA TELA
    short int CX=0, CY=0;
    COORD coord;
    coord.X = CX;
    coord.Y = CY;
    //FIM: COMANDOS PARA REPOSICIONAR O CURSOR NO INICIO DA TELA
    ///ALERTA: NAO MODIFICAR O TRECHO DE CODIGO, ACIMA.

    int m[7][7]= {   1,1,1,1,1,1,1,
                     1,0,0,0,0,0,1,
                     1,0,0,0,1,2,1,
                     1,0,0,0,2,0,1,
                     1,1,0,0,2,0,1,
                     1,0,0,0,0,0,1,
                     1,1,1,1,1,1,1
                 };



    ///Bomba
    int XB=-3;
    int YB=-3;
    ///inimigo
    char enemy  (041);
    vector <inimigo> Inimigos;
    Inimigos.push_back({1,1});
    Inimigos.push_back({1,5});
    Inimigos.push_back({1,3});
    ///Posicao inicial do personagem no console
    vector <player> J;
    J.push_back({5,5}); ///player 1
    J.push_back({5,4}); ///player 2
    ///Variavel para tecla precionada
    char tecla;
    ///Parade Quebravel
    char ParedeQuebravel (176);
    ///Bomba
    char Bomba           (022);
    char quente          (105);
    char kbom            (161);
    ///Vector da bomba
    vector <ExplosaoBomba> Explosoes;

    while(true)
    {
        ///Posiciona a escrita no iicio do console
        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);

        ///Imprime o jogo: mapa e personagem.
        for(int i=0; i<7; i++)
        {
            for(int j=0; j<7; j++)
            {
                bool isEnemy = false;

                if(i==J[0].x && j==J[0].y)
                {
                    cout<<char(36); //personagem
                }
                else if (i==XB&&j==YB){

                    cout<<char(022); //bomba
                }
                 else
                {
                    for(const auto& inimigo : Inimigos)
                    {
                        if(i==inimigo.xi&&j==inimigo.yi)
                        {
                            cout<<enemy;
                            isEnemy = true;
                            break;
                        }
                    }
                    if(!isEnemy)
                    {
                        switch (m[i][j])
                        {
                        case 0: cout<<" "; break;       //caminho
                        case 1: cout<<char(219); break; //parede
                        case 2: cout<<char(176); break; //parede quebravel
                                                        //default: cout<<"-"; //erro
                        }   //fim switch
                    }
                }
            }
            cout<<"\n";
        } //fim for mapa

        ///executa os movimentos
        if ( _kbhit() )
        {
            tecla = getch();
            switch(tecla)
            {
            case 72:
            case 'w': ///cima
                J[0].x--;
                if(colisao(m[J[0].x][J[0].y]==false))
                {
                    J[0].x++;
                }
                break;
            case 80:
            case 's': ///baixo
                J[0].x++;
                if(colisao(m[J[0].x][J[0].y]==false))
                {
                    J[0].x--;
                }
                break;
            case 75:
            case 'a': ///esquerda
                J[0].y--;
                if(colisao(m[J[0].x][J[0].y]==false))
                {
                    J[0].y++;
                }
                break;
            case 77:
            case 'd': ///direita
                J[0].y++;
                if(colisao(m[J[0].x][J[0].y]==false))
                {
                    J[0].y--;
                }
                break;
            case 78:
            case 'z': ///bomba
                if(XB==-3&&YB==-3){
                    XB=J[0].x;
                    YB=J[0].y;
                    m[XB][YB]=3;
                    Explosoes.clear();
                    ///DEFINE A AREA DAS EXPLOSÕES
                    Explosoes.push_back({XB-1,YB}); ///CIMA
                    Explosoes.push_back({XB+1,YB}); ///BAIXO
                    Explosoes.push_back({XB,YB-1}); ///ESQUERDA
                    Explosoes.push_back({XB,YB+1}); ///DIREITA
                }
                break;
            }
        }

        if(XB!=-3&&YB!=-3){
            auto TempoBombaAgora = chrono::high_resolution_clock::now();
            auto BombaPassou = duration_cast<milliseconds>(TempoBombaAgora-InicioBomba);
            if(BombaPassou>=BombaTimer){
                    for(auto &inimigo:Inimigos){
                        for(const auto& explosao : Explosoes){
                            if(m[explosao.xboom][explosao.yboom]==2){
                                m[explosao.xboom][explosao.yboom]=0;
                            }
                            if(inimigo.xi == explosao.xboom && inimigo.yi == explosao.yboom){
                                inimigo.xi=-1;
                                inimigo.yi=-1;
                            }
                        }
                    }
                    m[XB][YB]=0;
                    XB=-3;
                    YB=-3;
                    InicioBomba = TempoBombaAgora;
            }

        }

        ///executa os movimentos dos inimigos

        auto TempoAgora = chrono::high_resolution_clock::now();         ///Tempo recebe o tempo do clock, agora;
        auto Passou = duration_cast<milliseconds>(TempoAgora-Inicio);   ///Não precisa desse durantion cast pois ele converte os valores para millisegundos, sendo que as variaveis ja sao em millisegundos o que importa mesmo esta entre os ()
        for(auto i = Inimigos.begin(); i!=Inimigos.cend(); i++ )
        {
            if(Passou>=TempoInimigo)
            {
                int mov = rand()%4+1;
                switch(mov)
                {
                case 1:
                    i->xi++;
                    if(colisao(m[i->xi][i->yi]==false))
                    {
                        i->xi--;
                    }
                    break;
                case 2:
                    i->xi--;
                    if(colisao(m[i->xi][i->yi]==false))
                    {
                        i->xi++;
                    }
                    break;
                case 3:
                    i->yi++;
                    if(colisao(m[i->xi][i->yi]==false))
                    {
                        i->yi--;
                    }
                    break;
                case 4:
                    i->yi--;
                    if(colisao(m[i->xi][i->yi]==false))
                    {
                        i->yi++;
                    }
                    break;
                }
                Inicio = TempoAgora; ///inico recebe o tempo atual
            }
        }


    } //fim do laco do jogo

    return 0;
} //fim main
