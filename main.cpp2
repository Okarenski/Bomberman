#include <iostream>
#include <windows.h>
#include <conio.h>
#include <time.h>
#include <stdlib.h>

using namespace std;

struct inimigo {
    int xi, yi;
};

bool explosao(int ex) {
    if (ex == 2) {
        return false;
    } else {
        return true;
    }
}

bool colisao(int p) {
    if (p != 0) {
        return false;
    } else {
        return true;
    }
}

bool timer(int &bomb) {
    if (bomb == 100) {
        return false;
    } else {
        bomb++;
        return true;
    }
}

int main() {
    int entrada;
    cout << "=============================" << endl;
    cout << "        BEM-VINDO AO JOGO     " << endl;
    cout << "=============================" << endl;
    cout << "Digite 1 para jogar ou 2 para sair" << endl;

    do {
        cin >> entrada;
        if (entrada != 1 && entrada != 2) {
            srand(time(NULL)); // Semente para geração de números aleatórios

            int m[11][21]; // Mapa com bordas
            // Preencher as bordas
            for (int i = 0; i < 11; i++) {
                m[i][0] = 1; // borda esquerda
                m[i][20] = 1; // borda direita
            }
            for (int j = 0; j < 21; j++) {
                m[0][j] = 1; // borda superior
                m[10][j] = 1; // borda inferior
            }
            // Preencher o interior do mapa
            for (int i = 1; i < 10; i++) {
                for (int j = 1; j < 20; j++) {
                    // Verificar se é uma posição de parede fixa
                    if ((i == 2 || i == 4 || i == 6 || i == 8) && (j == 2 || j == 4 || j == 6 || j == 8 || j == 10 || j == 12 || j == 14 || j == 16 || j == 18)) {
                        m[i][j] = 1; // Parede fixa
                    } else {
                        m[i][j] = rand() % 3; // Valores aleatórios de 0 a 2
                    }
                }
            }
            cout << "Digite novamente." << endl;
        } else if (entrada == 2) {
            break;
        } else {
            system("cls");

            HANDLE out = GetStdHandle(STD_OUTPUT_HANDLE);
            CONSOLE_CURSOR_INFO cursorInfo;
            GetConsoleCursorInfo(out, &cursorInfo);
            cursorInfo.bVisible = false;
            SetConsoleCursorInfo(out, &cursorInfo);

            short int CX = 0, CY = 0;
            COORD coord;
            coord.X = CX;
            coord.Y = CY;
            srand(time(NULL)); // Semente para geração de números aleatórios

            int m[11][21]; // Mapa com bordas
            // Preencher as bordas
            for (int i = 0; i < 11; i++) {
                m[i][0] = 1; // borda esquerda
                m[i][20] = 1; // borda direita
            }
            for (int j = 0; j < 21; j++) {
                m[0][j] = 1; // borda superior
                m[10][j] = 1; // borda inferior
            }
            // Preencher o interior do mapa
            for (int i = 1; i < 10; i++) {
                for (int j = 1; j < 20; j++) {
                    // Verificar se é uma posição de parede fixa
                    if ((i == 2 || i == 4 || i == 6 || i == 8) && (j == 2 || j == 4 || j == 6 || j == 8 || j == 10 || j == 12 || j == 14 || j == 16 || j == 18)) {
                        m[i][j] = 1; // Parede fixa
                    } else {
                        m[i][j] = rand() % 3; // Valores aleatórios de 0 a 2
                    }
                }
            }


            int gameover;
            int vit = 0;
            int InimigosAtivos = 3;
            int selecionar;
            int x = 8, y = 18;
            inimigo um;
            inimigo dois;
            inimigo tres;
            um.xi = 1;
            um.yi = 18;
            dois.xi = 1;
            dois.yi = 3;
            tres.xi = 1;
            tres.yi = 5;
            int xb = -1, yb = -1;
            int bomb = 1;
            int explo = 1;
            char tecla;
            char personagem(153);
            char inimigo1(041);
            char inimigo2(041);
            char inimigo3(041);
            char bomba(022);
            char quente(105);
            char kbom(161);

            while (true) {
                SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);

                for (int i = 0; i < 12; i++) {
                    for (int j = 0; j < 22; j++) {
                        if (i == x && j == y) {
                            cout << personagem;
                        } else if (i == um.xi && um.yi == j) {
                            cout << inimigo1;
                        } else if (i == dois.xi && j == dois.yi) {
                            cout << inimigo2;
                        } else if (i == tres.xi && j == tres.yi) {
                            cout << inimigo3;
                        } else if ((i == xb && j == yb) && (bomb > 20 && bomb < 30)) {
                            cout << quente;
                        } else if ((i == xb && j == yb) && (bomb > 50 && bomb < 60)) {
                            cout << quente;
                        } else if ((i == xb && j == yb) && (bomb > 80 && bomb < 90)) {
                            cout << quente;
                        } else if (i == xb && j == yb) {
                            cout << bomba;
                        } else if ((i == xb && j == yb + 1) && (bomb > 97 && bomb <= 100)) {
                            cout << kbom;
                        } else if ((i == xb && j == yb - 1) && (bomb > 97 && bomb <= 100)) {
                            cout << kbom;
                        } else if ((i == xb + 1 && j == yb) && (bomb > 97 && bomb <= 100)) {
                            cout << kbom;
                        } else if ((i == xb - 1 && j == yb) && (bomb > 97 && bomb <= 100)) {
                            cout << kbom;
                        } else {
                            switch (m[i][j]) {
                                case 0: cout << " "; break;
                                case 1: cout << char(219); break;
                                case 2: cout << char(176); break;
                                case 3: cout << char(022); break;
                            }
                        }
                    }
                    cout << "\n";
                }

                if ((x == um.xi && y == um.yi) || (x == dois.xi && y == dois.yi) || (x == tres.xi && y == tres.yi)) {
                    x = -3;
                    y = -3;
                    break;
                }

                if (xb != -1 && yb != -1) {
                    if (timer(bomb) == false) {
                        m[xb][yb] = 0;

                        if (x == xb && y == yb) {
                            x = -3;
                            y = -3;
                            break;
                        }

                        if (explosao(m[xb][yb + 1]) == false) {
                            m[xb][yb + 1] = 0;
                        }
                        if (xb == x && yb + 1 == y) {
                            x = -3;
                            y = -3;
                            break;
                        }
                        if (xb == um.xi && yb + 1 == um.yi) {
                            um.xi = -2;
                            um.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb == dois.xi && yb + 1 == dois.yi) {
                            dois.xi = -2;
                            dois.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb == tres.xi && yb + 1 == tres.yi) {
                            tres.xi = -2;
                            tres.yi = -2;
                            InimigosAtivos--;
                        }

                        if (explosao(m[xb][yb - 1]) == false) {
                            m[xb][yb - 1] = 0;
                        }
                        if (xb == x && yb - 1 == y) {
                            x = -3;
                            y = -3;
                            break;
                        }
                        if (xb == um.xi && yb - 1 == um.yi) {
                            um.xi = -2;
                            um.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb == dois.xi && yb - 1 == dois.yi) {
                            dois.xi = -2;
                            dois.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb == tres.xi && yb - 1 == tres.yi) {
                            tres.xi = -2;
                            tres.yi = -2;
                            InimigosAtivos--;
                        }

                        if (explosao(m[xb + 1][yb]) == false) {
                            m[xb + 1][yb] = 0;
                        }
                        if (xb + 1 == x && yb == y) {
                            x = -3;
                            y = -3;
                            break;
                        }
                        if (xb + 1 == um.xi && yb == um.yi) {
                            um.xi = -2;
                            um.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb + 1 == dois.xi && yb == dois.yi) {
                            dois.xi = -2;
                            dois.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb + 1 == tres.xi && yb == tres.yi) {
                            tres.xi = -2;
                            tres.yi = -2;
                            InimigosAtivos--;
                        }

                        if (explosao(m[xb - 1][yb]) == false) {
                            m[xb - 1][yb] = 0;
                        }
                        if (xb - 1 == x && yb == y) {
                            x = -3;
                            y = -3;
                            break;
                        }
                        if (xb - 1 == um.xi && yb == um.yi) {
                            um.xi = -2;
                            um.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb - 1 == dois.xi && yb == dois.yi) {
                            dois.xi = -2;
                            dois.yi = -2;
                            InimigosAtivos--;
                        }
                        if (xb - 1 == tres.xi && yb == tres.yi) {
                            tres.xi = -2;
                            tres.yi = -2;
                            InimigosAtivos--;
                        }

                        bomb = 1;
                        xb = -1;
                        yb = -1;
                    }
                }

                if (_kbhit()) {
                    tecla = getch();
                    switch (tecla) {
                        case 72: case 'w':
                            x--;
                            if (colisao(m[x][y] == false)) {
                                x++;
                            }
                            break;

                        case 80: case 's':
                            x++;
                            if (colisao(m[x][y] == false)) {
                                x--;
                            }
                            break;
                        case 75: case 'a':
                            y--;
                            if (colisao(m[x][y] == false)) {
                                y++;
                            }
                            break;

                        case 77: case 'd':
                            y++;
                            if (colisao(m[x][y] == false)) {
                                y--;
                            }
                            break;

                        case 81: case 'z':
                            if (xb == -1 && yb == -1) {
                                xb = x;
                                yb = y;
                                m[xb][yb] = 3;
                            }
                            break;
                    }
                }

                int movimento = rand() % 90;
                switch (movimento) {
                    case 27:
                        um.xi--;
                        if (colisao(m[um.xi][um.yi] == false)) {
                            um.xi++;
                        }
                        break;
                    case 48:
                        um.xi++;
                        if (colisao(m[um.xi][um.yi] == false)) {
                            um.xi--;
                        }
                        break;
                    case 61:
                        um.yi--;
                        if (colisao(m[um.xi][um.yi] == false)) {
                            um.yi++;
                        }
                        break;
                    case 84:
                        um.yi++;
                        if (colisao(m[um.xi][um.yi] == false)) {
                            um.yi--;
                        }
                        break;
                }

                int movimento2 = rand() % 90;
                switch (movimento2) {
                    case 15:
                        dois.xi--;
                        if (colisao(m[dois.xi][dois.yi] == false)) {
                            dois.xi++;
                        }
                        break;
                    case 28:
                        dois.xi++;
                        if (colisao(m[dois.xi][dois.yi] == false)) {
                            dois.xi--;
                        }
                        break;
                    case 59:
                        dois.yi--;
                        if (colisao(m[dois.xi][dois.yi] == false)) {
                            dois.yi++;
                        }
                        break;
                    case 87:
                        dois.yi++;
                        if (colisao(m[dois.xi][dois.yi] == false)) {
                            dois.yi--;
                        }
                        break;
                }

                int movimento3 = rand() % 90;
                switch (movimento3) {
                    case 17:
                        tres.xi--;
                        if (colisao(m[tres.xi][tres.yi] == false)) {
                            tres.xi++;
                        }
                        break;
                    case 31:
                        tres.xi++;
                        if (colisao(m[tres.xi][tres.yi] == false)) {
                            tres.xi--;
                        }
                        break;
                    case 64:
                        tres.yi--;
                        if (colisao(m[tres.xi][tres.yi] == false)) {
                            tres.yi++;
                        }
                        break;
                    case 83:
                        tres.yi++;
                        if (colisao(m[tres.xi][tres.yi] == false)) {
                            tres.yi--;
                        }
                        break;
                }

                if (InimigosAtivos == 0) {
                    vit = 1;
                    break;
                }

            }

            system("cls");
            if (vit == 1) {
                cout << "Parabens bixo se ganhou, voce e pika! :D " << endl;
                system("pause");
                return 0;
            }

            if (vit == 0) {
                cout << "game over!" << endl;
                cout << "deseja tentar novamente? [1] sim [2] nao :" << endl;

                do {
                    cin >> selecionar;
                    if (selecionar < 1 && selecionar > 2) {
                        cout << "opcao invalida! digite novamente." << endl;
                        cin >> selecionar;
                    }

                    switch (selecionar) {
                        case 1:
                            system("cls");
                            main();
                            break;
                        case 2:
                            return 0;
                            break;
                    }
                } while (selecionar > 1 && selecionar < 2);
            }
            return 0;
        }
    } while (true);
}
