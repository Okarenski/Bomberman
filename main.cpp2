o.yboom] = 0;
                        }
                        if (inimigo.xi == explosao.xboom && inimigo.yi == explosao.yboom) {
                            inimigo.alive = false; // Marcando o inimigo como morto
                        }
                    }
                }
                m[XB][YB] = 0;
                XB = -3;
                YB = -3;
                InicioBomba = TempoBombaAgora;
            }
        }

        auto TempoAgora = high_resolution_clock::now();
        auto Passou = duration_cast<milliseconds>(TempoAgora - Inicio);
        for (auto &inimigo : Inimigos) {
            if (inimigo.alive && Passou >= TempoInimigo) {
                int mov = rand() % 4 + 1;
                switch (mov) {
                    case 1:
                        inimigo.xi++;
                        if (!colisao(m[inimigo.xi][inimigo.yi])) {
                            inimigo.xi--;
                        }
                        break;
                    case 2:
                        inimigo.xi--;
                        if (!colisao(m[inimigo.xi][inimigo.yi])) {
                            inimigo.xi++;
                        }
                        break;
                    case 3:
                        inimigo.yi++;
                        if (!colisao(m[inimigo.xi][inimigo.yi])) {
                            inimigo.yi--;
                        }
                        break;
                    case 4:
                        inimigo.yi--;
                        if (!colisao(m[inimigo.xi][inimigo.yi])) {
                            inimigo.yi++;
                        }
                        break;
                }
                Inicio = TempoAgora;
            }
        }

        if (all_of(Inimigos.begin(), Inimigos.end(), [](inimigo e){ return !e.alive; }) && !portalOpened) {
            portalX = rand() % 11 + 1;
            portalY = rand() % 25 + 1;
            while (m[portalX][portalY] != 0) {
                portalX = rand() % 11 + 1;
                portalY = rand() % 25 + 1;
            }
            portalOpened = true;
        }

        if (portalOpened && J.x == portalX && J.y == portalY) {
            resetGame(J, Inimigos, m);
            portalOpened = false;
            portalX = -1;
            portalY = -1;
        }
    }

    return 0;
}

